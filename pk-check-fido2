#!/bin/bash

set -euo pipefail

usage() {
  printf "Usage: %s <credential-file> <relying-party>\n" "$0"
  printf "       %s --help | -h\n" "$0"
  printf "\n"
  printf "<credential-file>     a file containing a (bae64-encoded) credential ID on the\n"
  printf "                      first line, and a PEM-encoded credential key as the rest\n"
  printf "                      of the file.\n"
  printf "<relying-party>       the relying party ID for the credential (utf-8 encoded).\n"
  printf "\n"
  printf "You can create a credential file by running the following commands:\n"
  printf "\n"
  printf "    echo challenge | openssl sha256 -binary | base64 > credential-parameters\n"
  printf "    echo relying-party-id >> credential-parameters\n"
  printf "    echo user-name >> credential-parameters\n"
  printf "    dd if=/dev/urandom bs=1 count=32 | base64 >> credential-parameters\n"
  printf "    fido2-cred -M -i credential-parameters /dev/hidraw1 -o intermediate\n"
  printf "    fido2-cred -V -i intermediate -o credential-file\n"
}

if [ $# -eq 1 ]; then
  if [ "$1" = "--help" ] || [ "$1" = "-h" ] ; then
    usage
    exit
  fi
fi

if [ $# -ne 2 ]; then
  usage >&2
  exit 1
fi

if ! command -v fido2-assert > /dev/null || ! command -v fido2-token > /dev/null; then
  printf "This program requires the commands fido2-assert and fido2-token to be\n" >&2
  printf "installed. These are available in the libfido2 package.\n" >&2
  exit 2
fi

if ! [ -r "$1" ]; then
  printf "ERROR: unable to read credential file '%s'.\n\n" "$1" >&2
  usage >&2
  exit 3
fi

cred_file="$1"
relying_party="$2"

umask 0077
assertion_param_file="$(mktemp)"
pubkey_file="$(mktemp)"

cleanup() {
  rm -f "$assertion_param_file" "$pubkey_file"
}

trap cleanup INT TERM EXIT

dd if=/dev/urandom bs=1 count=32 2>/dev/null | base64 > "$assertion_param_file"

printf "%s\n" "$relying_party" >> "$assertion_param_file"

head -n 1 "$cred_file" >> "$assertion_param_file"

tail -n +2 "$cred_file" > "$pubkey_file"

for token in $(fido2-token -L | cut -f 1 -d ':'); do
  set +e
  fido2-assert -G -i "$assertion_param_file" "$token" | fido2-assert -V "$pubkey_file" es256
  assert_exit_code="$?"
  set -e
  if [ $assert_exit_code -eq 0 ]; then
    printf "OK\n"
    exit 0
  fi
done

printf "FAIL\n"
exit 8
